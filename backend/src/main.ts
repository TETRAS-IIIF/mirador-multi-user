import { NestFactory } from '@nestjs/core';
import { AppModule } from './app.module';
import { ValidationPipe } from '@nestjs/common';
import { DocumentBuilder, SwaggerModule } from '@nestjs/swagger';
import * as Process from 'process';

// Import the metadata generated by the "PluginMetadataGenerator".
// We used that to avoid to write @APIProperty() decorators on each DTO class.
// https://docs.nestjs.com/openapi/cli-plugin
// https://docs.nestjs.com/recipes/swc#monorepo-and-cli-plugins
import metadata from './metadata';
import { EmailServerService } from './utils/email/email.service';
import { InternalServerErrorFilter } from './utils/ErrorFilters/InternalServerErrorExceptionFilter';
import { UsersService } from './BaseEntities/users/users.service';
import { json } from 'express';

async function bootstrap() {
  const app = await NestFactory.create(AppModule);
  app.use(json({ limit: `${parseInt(Process.env.MAX_API_PAYLOAD_SIZE)}mb` }));
  app.useGlobalPipes(new ValidationPipe());

  app.useGlobalFilters(
    new InternalServerErrorFilter(
      app.get(EmailServerService),
      app.get(UsersService),
    ),
  );

  app.enableCors();
  // Load the metadata generated by the "PluginMetadata"
  await SwaggerModule.loadPluginMetadata(metadata); // <-- here

  // Swagger configuration
  // https://docs.nestjs.com/openapi/introduction
  const config = new DocumentBuilder()
    .setTitle(<string>Process.env.SWAGGER_TITLE)
    .setDescription(<string>Process.env.SWAGGER_DESCRIPTION)
    .setVersion(<string>Process.env.SWAGGER_VERSION)
    .addBearerAuth()
    .build();
  const document = SwaggerModule.createDocument(app, config);
  SwaggerModule.setup(<string>Process.env.SWAGGER_RELATIVE_PATH, app, document);

  await app.listen(<string>Process.env.BACKEND_PORT);
}

bootstrap();
